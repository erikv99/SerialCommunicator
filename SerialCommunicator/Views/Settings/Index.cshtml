@using System.IO.Ports
@model CommunicationSettings

@{
    ViewData["Title"] = "Settings";
}


<div class="text-white min-h-screen flex flex-col items-center" style="padding-top: 3em;">
    <h1 class="text-3xl font-bold mb-8 gradient-text-purple-blue" style="line-height: 2em; margin-bottom: 1em;">Settings</h1>
    <div class="p-4 rounded-lg w-half" style="background-color: #322f357d;">
        <form asp-controller="Settings" asp-action="Save" method="post">

            @Html.HiddenFor(model => model.Id)

            <div class="flex">
                <div class="mb-4 mr-4">
                    @* todo: Clean up this css. (csmess) *@
                    @Html.LabelFor(model => model.PortName, htmlAttributes: new { @class = "block text-sm font-medium mb-1 gradient-text-purple-blue" })
                    @Html.TextBox("PortName", Model.PortName, new { @class = "bg-zinc-700 text-white p-2 rounded focus:outline-none w-half", id = "portName" })
                    @Html.ValidationMessageFor(model => model.PortName, "", new { @class = "text-danger" })
                </div>

                <div class="mb-4">
                    @Html.LabelFor(model => model.BaudRate, htmlAttributes: new { @class = "block text-sm font-medium mb-1 gradient-text-purple-blue" })
                    @Html.EditorFor(model => model.BaudRate, new { htmlAttributes = new { @class = "bg-zinc-700 text-white p-2 rounded focus:outline-none w-half" } })
                    @Html.ValidationMessageFor(model => model.BaudRate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="flex">
                <div class="mb-4 mr-4" style="width: 50%">
                    @Html.LabelFor(model => model.StopBits, htmlAttributes: new { @class = "block text-sm font-medium mb-1 gradient-text-purple-blue" })
                    @Html.DropDownListFor(model => model.StopBits, new SelectList(Enum.GetValues(typeof(StopBits))), new
                    {
                        @class = "bg-zinc-700 text-white p-2 rounded focus:outline-none w-full",
                        @id = "stopBits",
                    })
                    @Html.ValidationMessageFor(model => model.StopBits, "", new { @class = "text-danger" })
                </div>
                <div class="mb-4">
                    @Html.LabelFor(model => model.DataBits, htmlAttributes: new { @class = "block text-sm font-medium mb-1 gradient-text-purple-blue" })
                    @Html.TextBox("DataBits", Model.DataBits, new { @class = "bg-zinc-700 text-white p-2 rounded focus:outline-none w-half", id = "dataBits" })
                    @Html.ValidationMessageFor(model => model.DataBits, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="flex">
                <div class="mb-4 mr-4" style="width: 50%">
                    @Html.LabelFor(model => model.Parity, htmlAttributes: new { @class = "block text-sm font-medium mb-1 gradient-text-purple-blue" })
                    @Html.DropDownListFor(model => model.Parity, new SelectList(Enum.GetValues(typeof(Parity))), new
                    {
                        @class = "bg-zinc-700 text-white p-2 rounded focus:outline-none w-full",
                        @id = "parity",
                    })
                    @Html.ValidationMessageFor(model => model.Parity, "", new { @class = "text-danger" })
                </div>
                <div class="mb-4" style="width: 50%">
                    @Html.LabelFor(model => model.Handshake, htmlAttributes: new { @class = "block text-sm font-medium mb-1 gradient-text-purple-blue" })
                    @Html.DropDownListFor(model => model.Handshake, new SelectList(Enum.GetValues(typeof(Handshake))), new
                    {
                        @class = "bg-zinc-700 text-white p-2 rounded focus:outline-none w-full",
                        @id = "handshake",
                    })
                    @Html.ValidationMessageFor(model => model.Handshake, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="flex">
                <div class="mb-4 mr-4">
                    @Html.LabelFor(model => model.ReadTimeout, htmlAttributes: new { @class = "block text-sm font-medium mb-1 gradient-text-purple-blue" })
                    @Html.TextBox("ReadTimeout", Model.ReadTimeout, new { @class = "bg-zinc-700 text-white p-2 rounded focus:outline-none w-half", id = "readTimeout" })
                    @Html.ValidationMessageFor(model => model.ReadTimeout, "", new { @class = "text-danger" })
                </div>
                <div class="mb-4">
                    @Html.LabelFor(model => model.WriteTimeout, htmlAttributes: new { @class = "block text-sm font-medium mb-1 gradient-text-purple-blue" })
                    @Html.TextBox("WriteTimeout", Model.WriteTimeout, new { @class = "bg-zinc-700 text-white p-2 rounded focus:outline-none w-half", id = "writeTimeout" })
                    @Html.ValidationMessageFor(model => model.WriteTimeout, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="flex">
                <div class="mb-4 mr-4">
                    @Html.LabelFor(model => model.RtsEnable, htmlAttributes: new { @class = "block text-sm font-medium mb-1 gradient-text-purple-blue", @style = "float: left;margin-right: 1em;"})
                    @Html.CheckBox("RtsEnable", Model.RtsEnable, new { @class = "bg-zinc-700 text-white p-2 rounded focus:outline-none w-half", id = "rtsEnable" })
                    @Html.ValidationMessageFor(model => model.RtsEnable, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="btn-container">
                <button class="a-button" type="submit" style="--color: #6eff3e;">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                    Save
                </button>
            </div>
        </form>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                @TempData["SuccessMessage"]
            </div>
        }
    </div>
</div>
<style>

    body {
        --tw-bg-opacity: 1;
        background-color: rgb(39 39 42 / var(--tw-bg-opacity));
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    .btn-container {
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-wrap: wrap;
      gap: 120px;
      margin-bottom: 2.5em;
    }

    .a-button {
      position: relative;
      padding: 16px 30px;
      font-size: 1.5rem;
      color: var(--color);
      border: 2px solid rgba(0, 0, 0, 0.5);
      border-radius: 4px;
      text-shadow: 0 0 15px var(--color);
      text-decoration: none;
      text-transform: uppercase;
      letter-spacing: 0.1rem;
      transition: 0.5s;
      z-index: 1;
    }

    .button:hover {
      color: #fff;
      border: 2px solid rgba(0, 0, 0, 0);
      box-shadow: 0 0 0px var(--color);
    }

    .button::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--color);
      z-index: -1;
      transform: scale(0);
      transition: 0.5s;
    }

    .button:hover::before {
      transform: scale(1);
      transition-delay: 0.5s;
      box-shadow: 0 0 10px var(--color),
        0 0 30px var(--color),
        0 0 60px var(--color);
    }

    .button span {
      position: absolute;
      background: var(--color);
      pointer-events: none;
      border-radius: 2px;
      box-shadow: 0 0 10px var(--color),
        0 0 20px var(--color),
        0 0 30px var(--color),
        0 0 50px var(--color),
        0 0 100px var(--color);
      transition: 0.5s ease-in-out;
      transition-delay: 0.25s;
    }

    .button:hover span {
      opacity: 0;
      transition-delay: 0s;
    }

    .button span:nth-child(1),
    .button span:nth-child(3) {
      width: 40px;
      height: 4px;
    }

    .button:hover span:nth-child(1),
    .button:hover span:nth-child(3) {
      transform: translateX(0);
    }

    .button span:nth-child(2),
    .button span:nth-child(4) {
      width: 4px;
      height: 40px;
    }

    .button:hover span:nth-child(1),
    .button:hover span:nth-child(3) {
      transform: translateY(0);
    }

    .button span:nth-child(1) {
      top: calc(50% - 2px);
      left: -50px;
      transform-origin: left;
    }

    .button:hover span:nth-child(1) {
      left: 50%;
    }

    .button span:nth-child(3) {
      top: calc(50% - 2px);
      right: -50px;
      transform-origin: right;
    }

    .button:hover span:nth-child(3) {
      right: 50%;
    }

    .button span:nth-child(2) {
      left: calc(50% - 2px);
      top: -50px;
      transform-origin: top;
    }

    .button:hover span:nth-child(2) {
      top: 50%;
    }

    .button span:nth-child(4) {
      left: calc(50% - 2px);
      bottom: -50px;
      transform-origin: bottom;
    }

    .button:hover span:nth-child(4 ) {
      bottom: 50%;
    }
</style>

